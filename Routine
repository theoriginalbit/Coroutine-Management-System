--[[
Author: TheOriginalBIT
Version: 1.2.1
Created: 15 June 2013
Last Update: 19 June 2013

License:

COPYRIGHT NOTICE
Copyright Â© 2013 Joshua Asbury a.k.a TheOriginalBIT [theoriginalbit@gmail.com]

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
- Visible credit is given to the original author.
- The software is distributed in a non-profit way.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]--

local _ROUTINES = {}
local _CURRENTROUTINE = nil
local _NEXTID = 0
local _PRIORITYQUEUE = {}

local function safePairs( _t )
  local tKeys = {}
  for k,v in pairs( _t ) do
    table.insert(tKeys, k)
  end
  local nAt = 0
  return function()
    nAt = nAt + 1
    return tKeys[nAt], _t[tKeys[nAt]]
  end
end

local function nextId()
  local temp = _NEXTID
  _NEXTID = _NEXTID + 1
  return temp
end

local function status( _id )
  if type(_id) == "thread" then
    return coroutine.status(_id)
  elseif type(_id) == "number" then
    local co = _ROUTINES[_id]
    if not co then
      error( "Invalid routine id.", 3 )
    end
    return coroutine.status( co )
  end
  error( "Invalid argument #1: Expected routine or number, got "..type(_id), 3 )
end

local function create( _name, _func, _callback )
  if type(_func) == "function" then
    local id = nextId()
    _ROUTINES[id] = { id = id, name = _name, isPaused = false, callback = _callback, thread = coroutine.create(_func) }
    return id
  end

  return nil
end

local function resume( co, ... )
  local ok, param = coroutine.resume( co.thread, ... )
  if not ok then
    error( param )
  end
  if status( co.thread ) == "dead" then
    _ROUTINES[ co.id ] = nil
    _CURRENTROUTINE = nil
  end
  return true
end

local function kill( _id )
  if _ROUTINES[_id] and status( _ROUTINES[_id]) ~= "dead" then
    _ROUTINES[_id] = nil
    return true
  end
  return false
end

local function stop( _id )
  local co = _ROUTINES[_id]
  if co and status( co ) ~= "dead" then
    if co._callback then
      co._callback()
    else
      resume( co, "SIG_KILL" )
    end
    if status( co ) == "dead" then
      return true
    end
    return kill( _id )
  end
  return false
end

function queueTargetedEvent( _id, ... )
  local co = _ROUTINES[_id]

  if not co then
    error( "Invalid routine id.", 2 )
  elseif status( co ) == "dead" then
    error( "Routine is dead.", 2 )
  end
  
  os.queueEvent( "targeted_event_".._id, ... )
  return true
end

function queuePriorityTargetedEvent( _id, ... )
  local co = _ROUTINES[_id]

  if not co then
    error( "Invalid routine id.", 2 )
  elseif status( co ) == "dead" then
    error( "Routine is dead.", 2 )
  end

  table.insert( _PRIORITYQUEUE, {id = _id, data = {...}} )
end

function newRoutine( _name, _func, _callback )
  return create( _name, _func, _callback )
end

function statusRoutine( _id )
  return status( _id )
end

function killRoutine( _id )
  return kill( _id )
end

function stopRoutine( _id )
  return stop( _id )
end

function pauseRoutine( _id )
  local co = _ROUTINES[_id]

  if not co then
    error( "Invalid routine id.", 2 )
  elseif status( co ) == "dead" then
    error( "Routine is dead.", 2 )
  end

  co.isPaused = true
end

function resumeRoutine( _id )
  local co = _ROUTINES[_id]

  if not co then
    error( "Invalid routine id.", 2 )
  elseif status( co ) == "dead" then
    error( "Routine is dead.", 2 )
  end

  co.isPaused = false
end

function getRoutine( _id )
  local co = _ROUTINES[ _id or _CURRENTROUTINE ]
  return (co and co.thread or nil)
end

function isRoutinePaused( _id )
  local co = _ROUTINES[_id]

  if not co then
    error( "Invalid routine id.", 2 )
  elseif status( co ) == "dead" then
    error( "Routine is dead.", 2 )
  end

  return co.isPaused
end

function runRoutines()
  local eventData = {}

  while true do
    for id, routine in safePairs( _ROUTINES ) do
      if not routine.isPaused then
        _CURRENTROUTINE = id
        if not (eventData[1]:find("targeted_event_")) then
          resume( routine, unpack(eventData) )
        elseif eventData[1] == "targeted_event_"..routine.id then
          table.remove( eventData, 1 )
          resume( routine, unpack(eventData) )
          break
        end
      end
    end
    while _PRIORITYQUEUE[1] do
      local evt = _PRIORITYQUEUE[1]
      _CURRENTROUTINE = evt.id
      if _ROUTINES[evt.id].isPaused then break end
      resume( _ROUTINES[evt.id], unpack(evt.data) )
      table.remove( _PRIORITYQUEUE, 1 )
    end
    eventData = { os.pullEventRaw() }
  end
end