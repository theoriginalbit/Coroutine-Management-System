term.clear()
term.setCursorPos(1, 1)

local function loadAPI(path)
  local name = string.match(fs.getName(path), "(%a+)%.?.-")
  local env = setmetatable({}, { __index = _G })
  local func, err = loadfile(path)
  if not func then
    return false, printError(err)
  end
  setfenv(func, env)
  func()
  local api = {}
  for k,v in pairs(env) do
    api[k] =  v
  end
  _G[name] = api
  print(name)
  return true
end

loadAPI("Coroutine-Management-System/Routine.lua")

local oneId
local twoId
local threeId
local fourId

local function one()
  local second = 0
  local time = os.startTimer(1)

  while true do
    term.setCursorPos(1,1)
    term.clearLine()
    term.setCursorPos(1,1)
    print("One has been running for "..second.." seconds")

    if second == 5 and Routine.routineStatus( threeId ) ~= "dead" then
      term.setCursorPos(1, 6)
      print("killing three")
      Routine.killCoroutine( threeId )
    end
    
    if second == 7 and Routine.routineStatus( twoId ) ~= "dead" then
      Routine.pauseCoroutine( twoId )
      term.setCursorPos(1, 7)
      print("pausing two")
    end

    if second == 10 and Routine.routineStatus( twoId ) ~= "dead" then
      Routine.resumeCoroutine( twoId )
      term.setCursorPos(1, 8)
      print("resuming two")
    end

    if second == 11 and Routine.routineStatus( twoId ) ~= "dead" then
      term.setCursorPos(1, 9)
      print("stopping two")
      Routine.stopCoroutine( twoId ) --# this will invoke the callback
    end

    if second == 13 and Routine.routineStatus( fourId ) ~= "dead" then
      term.setCursorPos(1, 10)
      print("stopping four (no stop, causes kill)")
      Routine.stopCoroutine( fourId ) --# this will invoke the callback
    end

    if second == 20 then
      term.setCursorPos(1, 11)
      print("ending self")
      break
    end

    local e = { os.pullEvent("timer") } --# can use pull event like normal
    
    if e[1] == "timer" and e[2] == time then
      time = os.startTimer(1)
      second = second + 1
    end
  end
end

local function two()
  local sec = 0
  local time = os.startTimer(1)

  while true do
    term.setCursorPos(1,2)
    term.clearLine()
    term.setCursorPos(1,2)
    print("Two has been running for "..sec.." seconds")

    local e = { os.pullEventRaw() }
    
    if e[1] == "timer" and e[2] == time then
      time = os.startTimer(1)
      sec = sec + 1
    elseif e[1] == "SIG_STOP" then
      term.setCursorPos(1, 2)
      print("two got a SIG_STOP")
      break
    end
  end
  term.setCursorPos(1,2)
  term.clearLine()
  term.setCursorPos(1,2)
  print("Two is dead")
end

local function three()
  local sec = 0
  local time = os.startTimer(1)

  while true do
    term.setCursorPos(1,3)
    term.clearLine()
    term.setCursorPos(1,3)
    print("Three has been running for "..sec.." seconds")

    local e = { coroutine.yield() } --# we can even just go top level yielding
    
    if e[1] == "timer" and e[2] == time then
      time = os.startTimer(1)
      sec = sec + 1
    elseif e[1] == "SIG_KILL" then
      term.setCursorPos(1,3)
      term.clearLine()
      term.setCursorPos(1,3)
      print("Three is dead")
      break
    end
  end
end

local function four()
  local sec = 0
  local time = os.startTimer(1)

  while true do
    term.setCursorPos(1,4)
    term.clearLine()
    term.setCursorPos(1,4)
    print("Four has been running for "..sec.." seconds")

    local e = { os.pullEventRaw() }
    
    if e[1] == "timer" and e[2] == time then
      time = os.startTimer(1)
      sec = sec + 1
    elseif e[1] == "SIG_STOP" then
      term.setCursorPos(1,4)
      term.clearLine()
      term.setCursorPos(1,4)
      print("Four has been told to stop")
      sleep(2)
    elseif e[1] == "SIG_KILL" then
      term.setCursorPos(1,4)
      term.clearLine()
      term.setCursorPos(1,4)
      print("Four was killed")
      --# we could use a return here if we wanted to, and it would stop the routine, or we can let the CMS do it.
    end
  end
end

oneId = Routine.createCoroutine( "one", one )
twoId = Routine.createCoroutine( "two", two )
threeId = Routine.createCoroutine( "three", three )
fourId = Routine.createCoroutine( "four", four )

Routine.run()

term.setCursorPos(1, 13)
print("Done...")